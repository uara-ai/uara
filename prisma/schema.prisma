generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // Comment out extensions to avoid issues with Prisma Accelerate
  // extensions = [pgvector]
}

// HIPAA-compliant User model - stores only WorkOS auth ID and essential data
model User {
  id String @id // WorkOS user ID directly

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile completion status
  profileCompleted Boolean @default(false)

  // HIPAA-compliant health profile (optional fields)
  dateOfBirth DateTime?
  gender      Gender?
  ethnicity   Ethnicity?
  heightCm    Float? // Height in centimeters
  weightKg    Float? // Weight in kilograms
  bloodType   BloodType?

  // Medical conditions and allergies (encrypted)
  medicalConditions String? // JSON string of medical conditions
  allergies         String? // JSON string of allergies
  medications       String? // JSON string of current medications

  // Consent and privacy
  dataProcessingConsent Boolean @default(false)
  marketingConsent      Boolean @default(false)
  researchConsent       Boolean @default(false)

  // AI Chat integration
  chats       Chat[]
  documents   Document[]
  suggestions Suggestion[]

  BillingCustomer BillingCustomer?
  Subscription    Subscription?

  @@map("users")
}

// Gender enum for standardized values
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
  OTHER
}

// Ethnicity enum based on NIH standards
enum Ethnicity {
  AMERICAN_INDIAN_ALASKA_NATIVE
  ASIAN
  BLACK_AFRICAN_AMERICAN
  HISPANIC_LATINO
  NATIVE_HAWAIIAN_PACIFIC_ISLANDER
  WHITE
  MULTIRACIAL
  PREFER_NOT_TO_SAY
  OTHER
}

// Blood type enum
enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  UNKNOWN
}

// AI Chat models
model Chat {
  id         String   @id @default(cuid())
  title      String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  visibility String   @default("private") // 'private' or 'public'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Chat messages and related data
  messages  Message[]
  votes     Vote[]
  documents Document[]

  @@map("chats")
}

model Message {
  id          String   @id @default(cuid())
  chatId      String
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role        String // 'user', 'assistant', 'system'
  parts       Json // Message parts (text, images, etc.)
  attachments Json // File attachments
  createdAt   DateTime @default(now())

  votes Vote[]

  @@map("messages")
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([chatId, messageId])
  @@map("votes")
}

model Document {
  id        String   @id @default(cuid())
  chatId    String?
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String?  @db.Text
  kind      String   @default("text") // 'text', 'code', 'image', 'sheet'
  createdAt DateTime @default(now())

  suggestions Suggestion[]

  @@map("documents")
}

model Suggestion {
  id            String   @id @default(cuid())
  documentId    String
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalText  String   @db.Text
  suggestedText String   @db.Text
  description   String?  @db.Text
  isResolved    Boolean  @default(false)
  createdAt     DateTime @default(now())

  @@map("suggestions")
}

// Stripe Billing models
model BillingCustomer {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId String  @unique
  email            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("billing_customers")
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId             String
  stripeSubscriptionId         String?   @unique
  status                       String
  priceId                      String?
  productId                    String?
  currency                     String?
  amount                       Int?
  interval                     String?
  intervalCount                Int?
  cancelAtPeriodEnd            Boolean   @default(false)
  currentPeriodStart           DateTime?
  currentPeriodEnd             DateTime?
  startDate                    DateTime?
  trialStart                   DateTime?
  trialEnd                     DateTime?
  cancelAt                     DateTime?
  canceledAt                   DateTime?
  endedAt                      DateTime?
  latestInvoiceId              String?
  collectionMethod             String?
  defaultPaymentMethodId       String?
  defaultPaymentMethodBrand    String?
  defaultPaymentMethodLast4    String?
  defaultPaymentMethodExpMonth Int?
  defaultPaymentMethodExpYear  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stripeCustomerId])
  @@map("subscriptions")
}
