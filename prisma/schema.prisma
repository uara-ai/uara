generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // Comment out extensions to avoid issues with Prisma Accelerate
  // extensions = [pgvector]
}

// HIPAA-compliant User model - stores only WorkOS auth ID and essential data
model User {
  id String @id // WorkOS user ID directly

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile completion status
  profileCompleted Boolean @default(false)

  // HIPAA-compliant health profile (optional fields)
  dateOfBirth DateTime?
  gender      Gender?
  ethnicity   Ethnicity?
  heightCm    Float? // Height in centimeters
  weightKg    Float? // Weight in kilograms
  bloodType   BloodType?

  // Medical conditions and allergies (encrypted)
  medicalConditions String? // JSON string of medical conditions
  allergies         String? // JSON string of allergies
  medications       String? // JSON string of current medications

  // Consent and privacy
  dataProcessingConsent Boolean @default(false)
  marketingConsent      Boolean @default(false)
  researchConsent       Boolean @default(false)

  // Pricing tier (tier_1, tier_2, etc.)
  tier            String?
  tierPurchasedAt DateTime?

  // AI Chat integration
  chats       Chat[]
  documents   Document[]
  suggestions Suggestion[]

  BillingCustomer BillingCustomer?
  Subscription    Subscription?

  // WHOOP integration
  whoopUser WhoopUser?

  @@map("users")
}

// Gender enum for standardized values
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
  OTHER
}

// Ethnicity enum based on NIH standards
enum Ethnicity {
  AMERICAN_INDIAN_ALASKA_NATIVE
  ASIAN
  BLACK_AFRICAN_AMERICAN
  HISPANIC_LATINO
  NATIVE_HAWAIIAN_PACIFIC_ISLANDER
  WHITE
  MULTIRACIAL
  PREFER_NOT_TO_SAY
  OTHER
}

// Blood type enum
enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  UNKNOWN
}

// AI Chat models
model Chat {
  id         String   @id @default(cuid())
  title      String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  visibility String   @default("private") // 'private' or 'public'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Chat messages and related data
  messages  Message[]
  votes     Vote[]
  documents Document[]

  @@map("chats")
}

model Message {
  id          String   @id @default(cuid())
  chatId      String
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role        String // 'user', 'assistant', 'system'
  parts       Json // Message parts (text, images, etc.)
  attachments Json // File attachments
  createdAt   DateTime @default(now())

  votes Vote[]

  @@map("messages")
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([chatId, messageId])
  @@map("votes")
}

model Document {
  id        String   @id @default(cuid())
  chatId    String?
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String?  @db.Text
  kind      String   @default("text") // 'text', 'code', 'image', 'sheet'
  createdAt DateTime @default(now())

  suggestions Suggestion[]

  @@map("documents")
}

model Suggestion {
  id            String   @id @default(cuid())
  documentId    String
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalText  String   @db.Text
  suggestedText String   @db.Text
  description   String?  @db.Text
  isResolved    Boolean  @default(false)
  createdAt     DateTime @default(now())

  @@map("suggestions")
}

// Stripe Billing models
model BillingCustomer {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId String  @unique
  email            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("billing_customers")
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId             String
  stripeSubscriptionId         String?   @unique
  status                       String
  priceId                      String?
  productId                    String?
  currency                     String?
  amount                       Int?
  interval                     String?
  intervalCount                Int?
  cancelAtPeriodEnd            Boolean   @default(false)
  currentPeriodStart           DateTime?
  currentPeriodEnd             DateTime?
  startDate                    DateTime?
  trialStart                   DateTime?
  trialEnd                     DateTime?
  cancelAt                     DateTime?
  canceledAt                   DateTime?
  endedAt                      DateTime?
  latestInvoiceId              String?
  collectionMethod             String?
  defaultPaymentMethodId       String?
  defaultPaymentMethodBrand    String?
  defaultPaymentMethodLast4    String?
  defaultPaymentMethodExpMonth Int?
  defaultPaymentMethodExpYear  Int?

  // Pricing tier (tier_1, tier_2, etc.)
  tier            String?
  tierPurchasedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stripeCustomerId])
  @@map("subscriptions")
}

// WHOOP Integration models - HIPAA-compliant health data storage
model WhoopUser {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // WHOOP OAuth data
  whoopUserId  Int       @unique
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?

  // User profile from WHOOP
  email     String
  firstName String
  lastName  String

  // Body measurements (latest values)
  heightMeter    Float?
  weightKilogram Float?
  maxHeartRate   Int?

  // Sync tracking
  lastSyncAt     DateTime?
  disconnectedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Related health data
  recovery WhoopRecovery[]
  cycles   WhoopCycle[]
  sleep    WhoopSleep[]
  workouts WhoopWorkout[]

  @@map("whoop_users")
}

// WHOOP OAuth state tracking for CSRF protection
model WhoopOAuthState {
  id        String   @id @default(cuid())
  state     String   @unique
  userId    String
  expiresAt DateTime

  createdAt DateTime @default(now())

  @@index([state])
  @@index([expiresAt])
  @@map("whoop_oauth_states")
}

// WHOOP Recovery data - daily recovery scores and HRV
model WhoopRecovery {
  id          String    @id @default(cuid())
  whoopUserId String
  whoopUser   WhoopUser @relation(fields: [whoopUserId], references: [userId], onDelete: Cascade)

  // WHOOP identifiers
  cycleId Int
  sleepId Int

  // Recovery metadata
  scoreState String

  // Recovery metrics
  recoveryScore    Float?
  restingHeartRate Int?
  hrvRmssd         Float?
  userCalibrating  Boolean?

  createdAt DateTime
  updatedAt DateTime

  @@unique([whoopUserId, cycleId])
  @@index([whoopUserId, createdAt])
  @@map("whoop_recovery")
}

// WHOOP Cycle data - daily physiological cycles and strain
model WhoopCycle {
  id          String    @id @default(cuid())
  whoopUserId String
  whoopUser   WhoopUser @relation(fields: [whoopUserId], references: [userId], onDelete: Cascade)

  // WHOOP identifiers
  cycleId Int

  // Cycle timing
  start          DateTime
  end            DateTime?
  timezoneOffset String

  // Cycle metadata
  scoreState String

  // Cycle metrics
  strain           Float?
  averageHeartRate Int?
  maxHeartRate     Int?
  kilojoule        Float?
  percentRecorded  Float?

  createdAt DateTime
  updatedAt DateTime

  @@unique([whoopUserId, cycleId])
  @@index([whoopUserId, start])
  @@map("whoop_cycles")
}

// WHOOP Sleep data - sleep stages and performance metrics
model WhoopSleep {
  id          String    @id @default(cuid())
  whoopUserId String
  whoopUser   WhoopUser @relation(fields: [whoopUserId], references: [userId], onDelete: Cascade)

  // WHOOP identifiers
  sleepId Int

  // Sleep timing
  start          DateTime
  end            DateTime
  timezoneOffset String
  nap            Boolean

  // Sleep metadata
  scoreState String

  // Sleep stage durations (in milliseconds)
  totalInBedTime         Int?
  totalAwakeTime         Int?
  totalLightSleepTime    Int?
  totalSlowWaveSleepTime Int?
  totalRemSleepTime      Int?

  // Sleep quality metrics
  sleepCycleCount            Int?
  disturbanceCount           Int?
  respiratoryRate            Float?
  sleepPerformancePercentage Float?
  sleepConsistencyPercentage Float?
  sleepEfficiencyPercentage  Float?

  createdAt DateTime
  updatedAt DateTime

  @@unique([whoopUserId, sleepId])
  @@index([whoopUserId, start])
  @@map("whoop_sleep")
}

// WHOOP Workout data - exercise sessions with heart rate zones
model WhoopWorkout {
  id          String    @id @default(cuid())
  whoopUserId String
  whoopUser   WhoopUser @relation(fields: [whoopUserId], references: [userId], onDelete: Cascade)

  // WHOOP identifiers
  workoutId Int
  sportId   Int

  // Workout timing
  start          DateTime
  end            DateTime
  timezoneOffset String

  // Workout metadata
  scoreState String

  // Workout metrics
  strain               Float?
  averageHeartRate     Int?
  maxHeartRate         Int?
  kilojoule            Float?
  percentRecorded      Float?
  distanceMeters       Float?
  altitudeGainMeters   Float?
  altitudeChangeMeters Float?

  createdAt DateTime
  updatedAt DateTime

  @@unique([whoopUserId, workoutId])
  @@index([whoopUserId, start])
  @@map("whoop_workouts")
}
