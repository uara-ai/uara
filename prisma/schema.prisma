generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // Comment out extensions to avoid issues with Prisma Accelerate
  // extensions = [pgvector]
}

// HIPAA-compliant User model - stores only WorkOS auth ID and essential data
model User {
  id String @id // WorkOS user ID directly

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile completion status
  profileCompleted Boolean @default(false)

  // HIPAA-compliant health profile (optional fields)
  dateOfBirth DateTime?
  gender      Gender?
  ethnicity   Ethnicity?
  heightCm    Float? // Height in centimeters
  weightKg    Float? // Weight in kilograms
  bloodType   BloodType?

  // Medical conditions and allergies (encrypted)
  medicalConditions String? // JSON string of medical conditions
  allergies         String? // JSON string of allergies
  medications       String? // JSON string of current medications

  // Consent and privacy
  dataProcessingConsent Boolean @default(false)
  marketingConsent      Boolean @default(false)
  researchConsent       Boolean @default(false)

  // AI Chat integration
  chats           Chat[]
  BillingCustomer BillingCustomer?
  Subscription    Subscription?

  @@map("users")
}

// Gender enum for standardized values
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
  OTHER
}

// Ethnicity enum based on NIH standards
enum Ethnicity {
  AMERICAN_INDIAN_ALASKA_NATIVE
  ASIAN
  BLACK_AFRICAN_AMERICAN
  HISPANIC_LATINO
  NATIVE_HAWAIIAN_PACIFIC_ISLANDER
  WHITE
  MULTIRACIAL
  PREFER_NOT_TO_SAY
  OTHER
}

// Blood type enum
enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  UNKNOWN
}

// AI Chat models
model Chat {
  id        String   @id @default(cuid())
  title     String   @default("New Chat")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Chat messages
  messages ChatMessage[]

  @@map("chats")
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      String // 'user', 'assistant', 'system'
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Tool invocations for future AI tools support
  toolInvocations ToolInvocation[]

  @@map("chat_messages")
}

model ToolInvocation {
  id         String      @id @default(cuid())
  messageId  String
  message    ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  toolCallId String
  toolName   String
  args       Json
  result     Json?
  state      String // 'partial-call', 'call', 'result'
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("tool_invocations")
}

// Stripe Billing models
model BillingCustomer {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId String  @unique
  email            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("billing_customers")
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId     String
  stripeSubscriptionId String?   @unique
  status               String
  priceId              String?
  cancelAtPeriodEnd    Boolean   @default(false)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stripeCustomerId])
  @@map("subscriptions")
}
